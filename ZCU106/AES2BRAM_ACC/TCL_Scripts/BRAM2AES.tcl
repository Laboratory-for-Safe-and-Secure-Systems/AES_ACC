#*****************************************************************************************
# Vivado (TM) v2023.2 (64-bit)
#
# BRAM2AES.tcl: Tcl script for re-creating project 'BRAM2AES'
#
# Generated by Vivado on Fri Nov 08 10:10:21 +0100 2024
# IP Build 4028589 on Sat Oct 14 00:45:43 MDT 2023
#
# This file contains the Vivado Tcl commands for re-creating the project to the state*
# when this script was generated. In order to re-create the project, please source this
# file in the Vivado Tcl Shell.
#
# * Note that the runs in the created project will be configured the same way as the
#   original project, however they will not be launched automatically. To regenerate the
#   run results please launch the synthesis/implementation runs as needed.
#
#*****************************************************************************************
# NOTE: In order to use this script for source control purposes, please make sure that the
#       following files are added to the source control system:-
#
# 1. This project restoration tcl script (BRAM2AES.tcl) that was generated.
#
# 2. The following source(s) files that were local or imported into the original project.
#    (Please see the '$orig_proj_dir' and '$origin_dir' variable setting below at the start of the script)
#
#    "C:/Users/Lintl/Desktop/MAPR/Xilinx/ZCU106/BRAM2AES/BRAM2AES.srcs/sources_1/new/BRAM2AES.vhd"
#    "C:/Users/Lintl/Desktop/MAPR/Xilinx/ZCU106/BRAM2AES/BRAM2AES.srcs/constrs_1/new/xdc-master.xdc"
#    "C:/Users/Lintl/Desktop/MAPR/Xilinx/ZCU106/BRAM2AES/BRAM2AES.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp"
#
# 3. The following remote source files that were added to the original project:-
#
#    <none>
#
#*****************************************************************************************

# Check file required for this script exists
proc checkRequiredFiles { origin_dir} {
  set status true
  set files [list \
 "[file normalize "$origin_dir/BRAM2AES.srcs/sources_1/new/BRAM2AES.vhd"]"\
 "[file normalize "$origin_dir/BRAM2AES.srcs/constrs_1/new/xdc-master.xdc"]"\
 "[file normalize "$origin_dir/BRAM2AES.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp"]"\
  ]
  foreach ifile $files {
    if { ![file isfile $ifile] } {
      puts " Could not find local file $ifile "
      set status false
    }
  }

  set paths [list \
 "[file normalize "$origin_dir/../../../../../AppData/Roaming/Xilinx/01_IP-cores/AESGCM_k256_p0_L"]"]"\
  ]
  foreach ipath $paths {
    if { ![file isdirectory $ipath] } {
      puts " Could not access $ipath "
      set status false
    }
  }

  return $status
}
# Set the reference directory for source file relative paths (by default the value is script directory path)
set origin_dir "."

# Use origin directory path location variable, if specified in the tcl shell
if { [info exists ::origin_dir_loc] } {
  set origin_dir $::origin_dir_loc
}

# Set the project name
set _xil_proj_name_ "BRAM2AES"

# Use project name variable, if specified in the tcl shell
if { [info exists ::user_project_name] } {
  set _xil_proj_name_ $::user_project_name
}

variable script_file
set script_file "BRAM2AES.tcl"

# Help information for this script
proc print_help {} {
  variable script_file
  puts "\nDescription:"
  puts "Recreate a Vivado project from this script. The created project will be"
  puts "functionally equivalent to the original project for which this script was"
  puts "generated. The script contains commands for creating a project, filesets,"
  puts "runs, adding/importing sources and setting properties on various objects.\n"
  puts "Syntax:"
  puts "$script_file"
  puts "$script_file -tclargs \[--origin_dir <path>\]"
  puts "$script_file -tclargs \[--project_name <name>\]"
  puts "$script_file -tclargs \[--help\]\n"
  puts "Usage:"
  puts "Name                   Description"
  puts "-------------------------------------------------------------------------"
  puts "\[--origin_dir <path>\]  Determine source file paths wrt this path. Default"
  puts "                       origin_dir path value is \".\", otherwise, the value"
  puts "                       that was set with the \"-paths_relative_to\" switch"
  puts "                       when this script was generated.\n"
  puts "\[--project_name <name>\] Create project with the specified name. Default"
  puts "                       name is the name of the project from where this"
  puts "                       script was generated.\n"
  puts "\[--help\]               Print help information for this script"
  puts "-------------------------------------------------------------------------\n"
  exit 0
}

if { $::argc > 0 } {
  for {set i 0} {$i < $::argc} {incr i} {
    set option [string trim [lindex $::argv $i]]
    switch -regexp -- $option {
      "--origin_dir"   { incr i; set origin_dir [lindex $::argv $i] }
      "--project_name" { incr i; set _xil_proj_name_ [lindex $::argv $i] }
      "--help"         { print_help }
      default {
        if { [regexp {^-} $option] } {
          puts "ERROR: Unknown option '$option' specified, please type '$script_file -tclargs --help' for usage info.\n"
          return 1
        }
      }
    }
  }
}

# Set the directory path for the original project from where this script was exported
set orig_proj_dir "[file normalize "$origin_dir/"]"

# Check for paths and files needed for project creation
set validate_required 0
if { $validate_required } {
  if { [checkRequiredFiles $origin_dir] } {
    puts "Tcl file $script_file is valid. All files required for project creation is accesable. "
  } else {
    puts "Tcl file $script_file is not valid. Not all files required for project creation is accesable. "
    return
  }
}

# Create project
create_project ${_xil_proj_name_} ./${_xil_proj_name_} -part xczu7ev-ffvc1156-2-e

# Set the directory path for the new project
set proj_dir [get_property directory [current_project]]

# Reconstruct message rules
set_msg_config  -id {[BD 41-1306]}  -suppress  -ruleid {1}  -source 2
set_msg_config  -id {[BD 41-1306]}  -suppress  -ruleid {19}  -source 2
set_msg_config  -id {[BD 41-1271]}  -suppress  -ruleid {2}  -source 2
set_msg_config  -id {[BD 41-1271]}  -suppress  -ruleid {20}  -source 2
set_msg_config  -id {[BD 41-1306]}  -suppress  -ruleid {3}  -source 2
set_msg_config  -id {[BD 41-1271]}  -suppress  -ruleid {4}  -source 2


# Set project properties
set obj [current_project]
set_property -name "board_part" -value "xilinx.com:zcu106:part0:2.6" -objects $obj
set_property -name "default_lib" -value "xil_defaultlib" -objects $obj
set_property -name "enable_resource_estimation" -value "0" -objects $obj
set_property -name "enable_vhdl_2008" -value "1" -objects $obj
set_property -name "feature_set" -value "FeatureSet_Classic" -objects $obj
set_property -name "ip_cache_permissions" -value "read write" -objects $obj
set_property -name "ip_output_repo" -value "$proj_dir/${_xil_proj_name_}.cache/ip" -objects $obj
set_property -name "mem.enable_memory_map_generation" -value "1" -objects $obj
set_property -name "platform.board_id" -value "zcu106" -objects $obj
set_property -name "revised_directory_structure" -value "1" -objects $obj
set_property -name "sim.central_dir" -value "$proj_dir/${_xil_proj_name_}.ip_user_files" -objects $obj
set_property -name "sim.ip.auto_export_scripts" -value "1" -objects $obj
set_property -name "simulator_language" -value "Mixed" -objects $obj
set_property -name "sim_compile_state" -value "1" -objects $obj
set_property -name "target_language" -value "VHDL" -objects $obj
set_property -name "xpm_libraries" -value "XPM_CDC XPM_FIFO XPM_MEMORY" -objects $obj

# Create 'sources_1' fileset (if not found)
if {[string equal [get_filesets -quiet sources_1] ""]} {
  create_fileset -srcset sources_1
}

# Set IP repository paths
set obj [get_filesets sources_1]
if { $obj != {} } {
   set_property "ip_repo_paths" "[file normalize "$origin_dir/../../01_IP-cores/AESGCM_k256_p0_L"]" $obj

   # Rebuild user ip_repo's index before adding any source files
   update_ip_catalog -rebuild
}

# Set 'sources_1' fileset object
set obj [get_filesets sources_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/BRAM2AES.srcs/sources_1/new/BRAM2AES.vhd" ]\
]
set imported_files ""
foreach f $files {
  lappend imported_files [import_files -fileset sources_1 $f]
}

# Set 'sources_1' fileset file properties for remote files
# None

# Set 'sources_1' fileset file properties for local files
set file "new/BRAM2AES.vhd"
set file_obj [get_files -of_objects [get_filesets sources_1] [list "*$file"]]
set_property -name "file_type" -value "VHDL" -objects $file_obj


# Set 'sources_1' fileset properties
set obj [get_filesets sources_1]
set_property -name "dataflow_viewer_settings" -value "min_width=16" -objects $obj
set_property -name "top" -value "design_1_wrapper" -objects $obj

# Create 'constrs_1' fileset (if not found)
if {[string equal [get_filesets -quiet constrs_1] ""]} {
  create_fileset -constrset constrs_1
}

# Set 'constrs_1' fileset object
set obj [get_filesets constrs_1]

# Add/Import constrs file and set constrs file properties
set file "[file normalize "$origin_dir/BRAM2AES.srcs/constrs_1/new/xdc-master.xdc"]"
set file_imported [import_files -fileset constrs_1 [list $file]]
set file "new/xdc-master.xdc"
set file_obj [get_files -of_objects [get_filesets constrs_1] [list "*$file"]]
set_property -name "file_type" -value "XDC" -objects $file_obj

# Set 'constrs_1' fileset properties
set obj [get_filesets constrs_1]

# Create 'sim_1' fileset (if not found)
if {[string equal [get_filesets -quiet sim_1] ""]} {
  create_fileset -simset sim_1
}

# Set 'sim_1' fileset object
set obj [get_filesets sim_1]
# Empty (no sources present)

# Set 'sim_1' fileset properties
set obj [get_filesets sim_1]
set_property -name "top" -value "design_1_wrapper" -objects $obj
set_property -name "top_lib" -value "xil_defaultlib" -objects $obj

# Set 'utils_1' fileset object
set obj [get_filesets utils_1]
# Import local files from the original project
set files [list \
 [file normalize "${origin_dir}/BRAM2AES.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp" ]\
]
set imported_files ""
foreach f $files {
  lappend imported_files [import_files -fileset utils_1 $f]
}

# Set 'utils_1' fileset file properties for remote files
# None

# Set 'utils_1' fileset file properties for local files
set file "synth_1/design_1_wrapper.dcp"
set file_obj [get_files -of_objects [get_filesets utils_1] [list "*$file"]]
set_property -name "netlist_only" -value "0" -objects $file_obj


# Set 'utils_1' fileset properties
set obj [get_filesets utils_1]


# Adding sources referenced in BDs, if not already added
if { [get_files [list BRAM2AES.vhd]] == "" } {
  import_files -quiet -fileset sources_1 C:/Users/Lintl/Desktop/MAPR/Xilinx/ZCU106/BRAM2AES/BRAM2AES.srcs/sources_1/new/BRAM2AES.vhd
}


# Proc to create BD design_1
proc cr_bd_design_1 { parentCell } {
# The design that will be created by this Tcl proc contains the following 
# module references:
# BRAM2AES



  # CHANGE DESIGN NAME HERE
  set design_name design_1

  common::send_gid_msg -ssname BD::TCL -id 2010 -severity "INFO" "Currently there is no design <$design_name> in project, so creating one..."

  create_bd_design $design_name

  set bCheckIPsPassed 1
  ##################################################################
  # CHECK IPs
  ##################################################################
  set bCheckIPs 1
  if { $bCheckIPs == 1 } {
     set list_check_ips "\ 
  xilinx.com:ip:blk_mem_gen:8.4\
  xilinx.com:ip:axi_bram_ctrl:4.1\
  xilinx.com:ip:xdma:4.1\
  xilinx.com:ip:util_ds_buf:2.2\
  xilinx.com:ip:proc_sys_reset:5.0\
  xilinx.com:ip:clk_wiz:6.0\
  xilinx.com:ip:util_vector_logic:2.0\
  user.org:user:aesgcm_k256_p0_L:1.0\
  xilinx.com:ip:ila:6.2\
  "

   set list_ips_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2011 -severity "INFO" "Checking if the following IPs exist in the project's IP catalog: $list_check_ips ."

   foreach ip_vlnv $list_check_ips {
      set ip_obj [get_ipdefs -all $ip_vlnv]
      if { $ip_obj eq "" } {
         lappend list_ips_missing $ip_vlnv
      }
   }

   if { $list_ips_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2012 -severity "ERROR" "The following IPs are not found in the IP Catalog:\n  $list_ips_missing\n\nResolution: Please add the repository containing the IP(s) to the project." }
      set bCheckIPsPassed 0
   }

  }

  ##################################################################
  # CHECK Modules
  ##################################################################
  set bCheckModules 1
  if { $bCheckModules == 1 } {
     set list_check_mods "\ 
  BRAM2AES\
  "

   set list_mods_missing ""
   common::send_gid_msg -ssname BD::TCL -id 2020 -severity "INFO" "Checking if the following modules exist in the project's sources: $list_check_mods ."

   foreach mod_vlnv $list_check_mods {
      if { [can_resolve_reference $mod_vlnv] == 0 } {
         lappend list_mods_missing $mod_vlnv
      }
   }

   if { $list_mods_missing ne "" } {
      catch {common::send_gid_msg -ssname BD::TCL -id 2021 -severity "ERROR" "The following module(s) are not found in the project: $list_mods_missing" }
      common::send_gid_msg -ssname BD::TCL -id 2022 -severity "INFO" "Please add source files for the missing module(s) above."
      set bCheckIPsPassed 0
   }
}

  if { $bCheckIPsPassed != 1 } {
    common::send_gid_msg -ssname BD::TCL -id 2023 -severity "WARNING" "Will not continue with creation of design due to the error(s) above."
    return 3
  }

  
# Hierarchical cell: AES_encrypt
proc create_hier_cell_AES_encrypt { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_AES_encrypt() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins

  # Create pins
  create_bd_pin -dir I -type clk clk
  create_bd_pin -dir I -type rst rst
  create_bd_pin -dir O -from 31 -to 0 BRAM_PORT_addrb
  create_bd_pin -dir O -from 127 -to 0 BRAM_PORT_dinb
  create_bd_pin -dir O BRAM_PORT_enb
  create_bd_pin -dir O -from 0 -to 0 Res
  create_bd_pin -dir O -from 15 -to 0 BRAM_PORT_web
  create_bd_pin -dir I -from 127 -to 0 AES_encrypt_BRAM_PORT_doutb
  create_bd_pin -dir I -from 3 -to 0 Data_ready_ext
  create_bd_pin -dir O GPIO_Encrytion_finish
  create_bd_pin -dir I -from 31 -to 0 bram_wrdata_a
  create_bd_pin -dir I -from 31 -to 0 bram_rddata_a
  create_bd_pin -dir I -from 7 -to 0 c2h_sts_0
  create_bd_pin -dir I -from 7 -to 0 h2c_sts_0

  # Create instance: BRAM2AES_0, and set properties
  set block_name BRAM2AES
  set block_cell_name BRAM2AES_0
  if { [catch {set BRAM2AES_0 [create_bd_cell -type module -reference $block_name $block_cell_name] } errmsg] } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2095 -severity "ERROR" "Unable to add referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   } elseif { $BRAM2AES_0 eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2096 -severity "ERROR" "Unable to referenced block <$block_name>. Please add the files for ${block_name}'s definition into the project."}
     return 1
   }
  
  # Create instance: util_vector_logic_0, and set properties
  set util_vector_logic_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_0 ]
  set_property -dict [list \
    CONFIG.C_OPERATION {not} \
    CONFIG.C_SIZE {1} \
  ] $util_vector_logic_0


  # Create instance: util_vector_logic_1, and set properties
  set util_vector_logic_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_vector_logic:2.0 util_vector_logic_1 ]
  set_property -dict [list \
    CONFIG.C_OPERATION {not} \
    CONFIG.C_SIZE {1} \
  ] $util_vector_logic_1


  # Create instance: aesgcm_k256_p0_L_0, and set properties
  set aesgcm_k256_p0_L_0 [ create_bd_cell -type ip -vlnv user.org:user:aesgcm_k256_p0_L:1.0 aesgcm_k256_p0_L_0 ]

  # Create instance: ila_0, and set properties
  set ila_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:ila:6.2 ila_0 ]
  set_property -dict [list \
    CONFIG.C_MONITOR_TYPE {Native} \
    CONFIG.C_NUM_OF_PROBES {16} \
    CONFIG.C_PROBE0_WIDTH {4} \
    CONFIG.C_PROBE10_WIDTH {32} \
    CONFIG.C_PROBE11_WIDTH {32} \
    CONFIG.C_PROBE12_WIDTH {4} \
    CONFIG.C_PROBE13_WIDTH {1} \
    CONFIG.C_PROBE14_WIDTH {8} \
    CONFIG.C_PROBE15_WIDTH {8} \
    CONFIG.C_PROBE16_WIDTH {1} \
    CONFIG.C_PROBE17_WIDTH {1} \
    CONFIG.C_PROBE1_WIDTH {4} \
    CONFIG.C_PROBE2_WIDTH {4} \
    CONFIG.C_PROBE3_WIDTH {4} \
    CONFIG.C_PROBE4_WIDTH {64} \
    CONFIG.C_PROBE5_WIDTH {32} \
    CONFIG.C_PROBE6_WIDTH {128} \
    CONFIG.C_PROBE7_WIDTH {128} \
    CONFIG.C_PROBE8_WIDTH {128} \
    CONFIG.C_PROBE9_WIDTH {128} \
  ] $ila_0


  # Create port connections
  connect_bd_net -net BRAM2AES_0_BRAM_PORT_addrb [get_bd_pins BRAM2AES_0/BRAM_PORT_addrb] [get_bd_pins BRAM_PORT_addrb] [get_bd_pins ila_0/probe5]
  connect_bd_net -net BRAM2AES_0_BRAM_PORT_dinb [get_bd_pins BRAM2AES_0/BRAM_PORT_dinb] [get_bd_pins BRAM_PORT_dinb] [get_bd_pins ila_0/probe9]
  connect_bd_net -net BRAM2AES_0_BRAM_PORT_enb [get_bd_pins BRAM2AES_0/BRAM_PORT_enb] [get_bd_pins BRAM_PORT_enb]
  connect_bd_net -net BRAM2AES_0_BRAM_PORT_web [get_bd_pins BRAM2AES_0/BRAM_PORT_web] [get_bd_pins BRAM_PORT_web]
  connect_bd_net -net BRAM2AES_0_Encryption_finish_ext [get_bd_pins BRAM2AES_0/Encryption_finish_ext] [get_bd_pins GPIO_Encrytion_finish] [get_bd_pins ila_0/probe13]
  connect_bd_net -net BRAM2AES_0_aes_gcm_data_in [get_bd_pins BRAM2AES_0/aes_gcm_data_in] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_data_in_i] [get_bd_pins ila_0/probe7]
  connect_bd_net -net BRAM2AES_0_aes_gcm_data_in_bval [get_bd_pins BRAM2AES_0/aes_gcm_data_in_bval] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_data_in_bval_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_enc_dec [get_bd_pins BRAM2AES_0/aes_gcm_enc_dec] [get_bd_pins util_vector_logic_1/Op1]
  connect_bd_net -net BRAM2AES_0_aes_gcm_ghash_aad [get_bd_pins BRAM2AES_0/aes_gcm_ghash_aad] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_ghash_aad_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_ghash_aad_bval [get_bd_pins BRAM2AES_0/aes_gcm_ghash_aad_bval] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_ghash_aad_bval_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_ghash_pkt_val [get_bd_pins BRAM2AES_0/aes_gcm_ghash_pkt_val] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_ghash_pkt_val_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_icb_start_cnt [get_bd_pins BRAM2AES_0/aes_gcm_icb_start_cnt] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_icb_start_cnt_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_icb_stop_cnt [get_bd_pins BRAM2AES_0/aes_gcm_icb_stop_cnt] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_icb_stop_cnt_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_iv [get_bd_pins BRAM2AES_0/aes_gcm_iv] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_iv_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_iv_val [get_bd_pins BRAM2AES_0/aes_gcm_iv_val] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_iv_val_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_key_word [get_bd_pins BRAM2AES_0/aes_gcm_key_word] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_key_word_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_key_word_val [get_bd_pins BRAM2AES_0/aes_gcm_key_word_val] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_key_word_val_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_mode [get_bd_pins BRAM2AES_0/aes_gcm_mode] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_mode_i]
  connect_bd_net -net BRAM2AES_0_aes_gcm_pipe_reset [get_bd_pins BRAM2AES_0/aes_gcm_pipe_reset] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_pipe_reset_i]
  connect_bd_net -net BRAM2AES_0_debug_data_size [get_bd_pins BRAM2AES_0/debug_data_size] [get_bd_pins ila_0/probe4]
  connect_bd_net -net BRAM2AES_0_debug_state [get_bd_pins BRAM2AES_0/debug_state] [get_bd_pins ila_0/probe0]
  connect_bd_net -net BRAM2AES_0_debug_state_init [get_bd_pins BRAM2AES_0/debug_state_init] [get_bd_pins ila_0/probe1]
  connect_bd_net -net BRAM2AES_0_debug_state_reset [get_bd_pins BRAM2AES_0/debug_state_reset] [get_bd_pins ila_0/probe3]
  connect_bd_net -net BRAM2AES_0_debug_state_send [get_bd_pins BRAM2AES_0/debug_state_send] [get_bd_pins ila_0/probe2]
  connect_bd_net -net Data_ready_ext_1 [get_bd_pins Data_ready_ext] [get_bd_pins ila_0/probe12] [get_bd_pins BRAM2AES_0/Data_ready_ext]
  connect_bd_net -net aesgcm_k256_p0_L_0_aes_gcm_data_out_bval_o [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_data_out_bval_o] [get_bd_pins BRAM2AES_0/aes_gcm_data_out_bval]
  connect_bd_net -net aesgcm_k256_p0_L_0_aes_gcm_data_out_o [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_data_out_o] [get_bd_pins ila_0/probe8] [get_bd_pins BRAM2AES_0/aes_gcm_data_out]
  connect_bd_net -net aesgcm_k256_p0_L_0_aes_gcm_data_out_val_o [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_data_out_val_o] [get_bd_pins BRAM2AES_0/aes_gcm_data_out_val]
  connect_bd_net -net aesgcm_k256_p0_L_0_aes_gcm_ghash_tag_o [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_ghash_tag_o] [get_bd_pins BRAM2AES_0/aes_gcm_ghash_tag]
  connect_bd_net -net aesgcm_k256_p0_L_0_aes_gcm_ghash_tag_val_o [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_ghash_tag_val_o] [get_bd_pins BRAM2AES_0/aes_gcm_ghash_tag_val]
  connect_bd_net -net aesgcm_k256_p0_L_0_aes_gcm_ready_o [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_ready_o] [get_bd_pins BRAM2AES_0/aes_gcm_ready]
  connect_bd_net -net blk_mem_gen_0_doutb [get_bd_pins AES_encrypt_BRAM_PORT_doutb] [get_bd_pins ila_0/probe6] [get_bd_pins BRAM2AES_0/BRAM_PORT_doutb]
  connect_bd_net -net bram_rddata_a_1 [get_bd_pins bram_rddata_a] [get_bd_pins ila_0/probe11]
  connect_bd_net -net bram_wrdata_a_1 [get_bd_pins bram_wrdata_a] [get_bd_pins ila_0/probe10]
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins clk] [get_bd_pins aesgcm_k256_p0_L_0/clk_i] [get_bd_pins ila_0/clk] [get_bd_pins BRAM2AES_0/clk]
  connect_bd_net -net probe15_1 [get_bd_pins c2h_sts_0] [get_bd_pins ila_0/probe15]
  connect_bd_net -net probe16_1 [get_bd_pins h2c_sts_0] [get_bd_pins ila_0/probe14]
  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn [get_bd_pins rst] [get_bd_pins util_vector_logic_0/Op1] [get_bd_pins BRAM2AES_0/rst]
  connect_bd_net -net util_vector_logic_0_Res [get_bd_pins util_vector_logic_0/Res] [get_bd_pins aesgcm_k256_p0_L_0/rst_i] [get_bd_pins Res]
  connect_bd_net -net util_vector_logic_1_Res [get_bd_pins util_vector_logic_1/Res] [get_bd_pins aesgcm_k256_p0_L_0/aes_gcm_enc_dec_i]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: Clk_Reset
proc create_hier_cell_Clk_Reset { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_Clk_Reset() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 user_si570_sysclk


  # Create pins
  create_bd_pin -dir O -type clk clk_out1
  create_bd_pin -dir I -type rst reset
  create_bd_pin -dir O -from 0 -to 0 -type rst peripheral_aresetn

  # Create instance: proc_sys_reset_0, and set properties
  set proc_sys_reset_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:proc_sys_reset:5.0 proc_sys_reset_0 ]
  set_property -dict [list \
    CONFIG.RESET_BOARD_INTERFACE {reset} \
    CONFIG.USE_BOARD_FLOW {true} \
  ] $proc_sys_reset_0


  # Create instance: clk_wiz_0, and set properties
  set clk_wiz_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:clk_wiz:6.0 clk_wiz_0 ]
  set_property -dict [list \
    CONFIG.CLK_IN1_BOARD_INTERFACE {user_si570_sysclk} \
    CONFIG.RESET_BOARD_INTERFACE {reset} \
    CONFIG.USE_BOARD_FLOW {true} \
  ] $clk_wiz_0


  # Create interface connections
  connect_bd_intf_net -intf_net user_si570_sysclk_1 [get_bd_intf_pins user_si570_sysclk] [get_bd_intf_pins clk_wiz_0/CLK_IN1_D]

  # Create port connections
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins clk_wiz_0/clk_out1] [get_bd_pins clk_out1] [get_bd_pins proc_sys_reset_0/slowest_sync_clk]
  connect_bd_net -net clk_wiz_0_locked [get_bd_pins clk_wiz_0/locked] [get_bd_pins proc_sys_reset_0/dcm_locked]
  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn [get_bd_pins proc_sys_reset_0/peripheral_aresetn] [get_bd_pins peripheral_aresetn]
  connect_bd_net -net reset_1 [get_bd_pins reset] [get_bd_pins clk_wiz_0/reset] [get_bd_pins proc_sys_reset_0/ext_reset_in]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  
# Hierarchical cell: PCIe
proc create_hier_cell_PCIe { parentCell nameHier } {

  variable script_folder

  if { $parentCell eq "" || $nameHier eq "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2092 -severity "ERROR" "create_hier_cell_PCIe() - Empty argument(s)!"}
     return
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj

  # Create cell and set as current instance
  set hier_obj [create_bd_cell -type hier $nameHier]
  current_bd_instance $hier_obj

  # Create interface pins
  create_bd_intf_pin -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pci_express_x1

  create_bd_intf_pin -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_refclk


  # Create pins
  create_bd_pin -dir I -type rst pcie_perstn
  create_bd_pin -dir O -from 14 -to 0 bram_addr_a
  create_bd_pin -dir O -type clk bram_clk_a
  create_bd_pin -dir O -from 31 -to 0 bram_wrdata_a
  create_bd_pin -dir I -from 31 -to 0 bram_rddata_a
  create_bd_pin -dir O bram_en_a
  create_bd_pin -dir O -type rst bram_rst_a
  create_bd_pin -dir O -from 3 -to 0 bram_we_a
  create_bd_pin -dir O -from 7 -to 0 c2h_sts_0
  create_bd_pin -dir O -from 7 -to 0 h2c_sts_0

  # Create instance: axi_bram_ctrl_0, and set properties
  set axi_bram_ctrl_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_bram_ctrl:4.1 axi_bram_ctrl_0 ]
  set_property -dict [list \
    CONFIG.DATA_WIDTH {32} \
    CONFIG.PROTOCOL {AXI4} \
    CONFIG.RD_CMD_OPTIMIZATION {0} \
    CONFIG.SINGLE_PORT_BRAM {1} \
    CONFIG.USE_ECC {0} \
  ] $axi_bram_ctrl_0


  # Create instance: xdma_0, and set properties
  set xdma_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:xdma:4.1 xdma_0 ]
  set_property -dict [list \
    CONFIG.PCIE_BOARD_INTERFACE {pci_express_x1} \
    CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn} \
    CONFIG.pl_link_cap_max_link_speed {5.0_GT/s} \
    CONFIG.xdma_axi_intf_mm {AXI_Memory_Mapped} \
    CONFIG.xdma_rnum_chnl {4} \
    CONFIG.xdma_sts_ports {true} \
    CONFIG.xdma_wnum_chnl {4} \
  ] $xdma_0


  # Create instance: util_ds_buf, and set properties
  set util_ds_buf [ create_bd_cell -type ip -vlnv xilinx.com:ip:util_ds_buf:2.2 util_ds_buf ]
  set_property -dict [list \
    CONFIG.DIFF_CLK_IN_BOARD_INTERFACE {pcie_refclk} \
    CONFIG.USE_BOARD_FLOW {true} \
  ] $util_ds_buf


  # Create instance: axi_interconnect_0, and set properties
  set axi_interconnect_0 [ create_bd_cell -type ip -vlnv xilinx.com:ip:axi_interconnect:2.1 axi_interconnect_0 ]
  set_property -dict [list \
    CONFIG.ENABLE_ADVANCED_OPTIONS {0} \
    CONFIG.NUM_MI {1} \
    CONFIG.NUM_SI {1} \
  ] $axi_interconnect_0


  # Create interface connections
  connect_bd_intf_net -intf_net axi_interconnect_0_M00_AXI [get_bd_intf_pins axi_interconnect_0/M00_AXI] [get_bd_intf_pins axi_bram_ctrl_0/S_AXI]
  connect_bd_intf_net -intf_net pcie_refclk_1 [get_bd_intf_pins pcie_refclk] [get_bd_intf_pins util_ds_buf/CLK_IN_D]
  connect_bd_intf_net -intf_net xdma_0_M_AXI [get_bd_intf_pins xdma_0/M_AXI] [get_bd_intf_pins axi_interconnect_0/S00_AXI]
  connect_bd_intf_net -intf_net xdma_0_pcie_mgt [get_bd_intf_pins pci_express_x1] [get_bd_intf_pins xdma_0/pcie_mgt]

  # Create port connections
  connect_bd_net -net ACLK_1 [get_bd_pins xdma_0/axi_aclk] [get_bd_pins axi_bram_ctrl_0/s_axi_aclk] [get_bd_pins axi_interconnect_0/ACLK] [get_bd_pins axi_interconnect_0/S00_ACLK] [get_bd_pins axi_interconnect_0/M00_ACLK]
  connect_bd_net -net axi_bram_ctrl_0_bram_addr_a [get_bd_pins axi_bram_ctrl_0/bram_addr_a] [get_bd_pins bram_addr_a]
  connect_bd_net -net axi_bram_ctrl_0_bram_clk_a [get_bd_pins axi_bram_ctrl_0/bram_clk_a] [get_bd_pins bram_clk_a]
  connect_bd_net -net axi_bram_ctrl_0_bram_en_a [get_bd_pins axi_bram_ctrl_0/bram_en_a] [get_bd_pins bram_en_a]
  connect_bd_net -net axi_bram_ctrl_0_bram_rst_a [get_bd_pins axi_bram_ctrl_0/bram_rst_a] [get_bd_pins bram_rst_a]
  connect_bd_net -net axi_bram_ctrl_0_bram_we_a [get_bd_pins axi_bram_ctrl_0/bram_we_a] [get_bd_pins bram_we_a]
  connect_bd_net -net axi_bram_ctrl_0_bram_wrdata_a [get_bd_pins axi_bram_ctrl_0/bram_wrdata_a] [get_bd_pins bram_wrdata_a]
  connect_bd_net -net bram_rddata_a_1 [get_bd_pins bram_rddata_a] [get_bd_pins axi_bram_ctrl_0/bram_rddata_a]
  connect_bd_net -net pcie_perstn_1 [get_bd_pins pcie_perstn] [get_bd_pins xdma_0/sys_rst_n]
  connect_bd_net -net util_ds_buf_IBUF_DS_ODIV2 [get_bd_pins util_ds_buf/IBUF_DS_ODIV2] [get_bd_pins xdma_0/sys_clk]
  connect_bd_net -net util_ds_buf_IBUF_OUT [get_bd_pins util_ds_buf/IBUF_OUT] [get_bd_pins xdma_0/sys_clk_gt]
  connect_bd_net -net xdma_0_axi_aresetn [get_bd_pins xdma_0/axi_aresetn] [get_bd_pins axi_interconnect_0/ARESETN] [get_bd_pins axi_interconnect_0/S00_ARESETN] [get_bd_pins axi_interconnect_0/M00_ARESETN] [get_bd_pins axi_bram_ctrl_0/s_axi_aresetn]
  connect_bd_net -net xdma_0_c2h_sts_0 [get_bd_pins xdma_0/c2h_sts_0] [get_bd_pins c2h_sts_0]
  connect_bd_net -net xdma_0_h2c_sts_0 [get_bd_pins xdma_0/h2c_sts_0] [get_bd_pins h2c_sts_0]

  # Restore current instance
  current_bd_instance $oldCurInst
}
  variable script_folder

  if { $parentCell eq "" } {
     set parentCell [get_bd_cells /]
  }

  # Get object for parentCell
  set parentObj [get_bd_cells $parentCell]
  if { $parentObj == "" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2090 -severity "ERROR" "Unable to find parent cell <$parentCell>!"}
     return
  }

  # Make sure parentObj is hier blk
  set parentType [get_property TYPE $parentObj]
  if { $parentType ne "hier" } {
     catch {common::send_gid_msg -ssname BD::TCL -id 2091 -severity "ERROR" "Parent <$parentObj> has TYPE = <$parentType>. Expected to be <hier>."}
     return
  }

  # Save current instance; Restore later
  set oldCurInst [current_bd_instance .]

  # Set parent object as current
  current_bd_instance $parentObj


  # Create interface ports
  set pci_express_x1 [ create_bd_intf_port -mode Master -vlnv xilinx.com:interface:pcie_7x_mgt_rtl:1.0 pci_express_x1 ]

  set pcie_refclk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 pcie_refclk ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {100000000} \
   ] $pcie_refclk

  set user_si570_sysclk [ create_bd_intf_port -mode Slave -vlnv xilinx.com:interface:diff_clock_rtl:1.0 user_si570_sysclk ]
  set_property -dict [ list \
   CONFIG.FREQ_HZ {300000000} \
   ] $user_si570_sysclk


  # Create ports
  set pcie_perstn [ create_bd_port -dir I -type rst pcie_perstn ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_LOW} \
 ] $pcie_perstn
  set reset [ create_bd_port -dir I -type rst reset ]
  set_property -dict [ list \
   CONFIG.POLARITY {ACTIVE_HIGH} \
 ] $reset
  set GPIO_LED_0_LS [ create_bd_port -dir O GPIO_LED_0_LS ]
  set PMOD1_0_LS [ create_bd_port -dir O PMOD1_0_LS ]

  # Create instance: PCIe
  create_hier_cell_PCIe [current_bd_instance .] PCIe

  # Create instance: Clk_Reset
  create_hier_cell_Clk_Reset [current_bd_instance .] Clk_Reset

  # Create instance: AES_encrypt
  create_hier_cell_AES_encrypt [current_bd_instance .] AES_encrypt

  # Create instance: axi_bram_ctrl_0_bram_1, and set properties
  set axi_bram_ctrl_0_bram_1 [ create_bd_cell -type ip -vlnv xilinx.com:ip:blk_mem_gen:8.4 axi_bram_ctrl_0_bram_1 ]
  set_property -dict [list \
    CONFIG.EN_SAFETY_CKT {false} \
    CONFIG.Enable_32bit_Address {true} \
    CONFIG.Memory_Type {True_Dual_Port_RAM} \
    CONFIG.Register_PortA_Output_of_Memory_Primitives {false} \
    CONFIG.Register_PortB_Output_of_Memory_Primitives {false} \
    CONFIG.Write_Depth_A {2048} \
    CONFIG.Write_Width_A {32} \
    CONFIG.Write_Width_B {128} \
    CONFIG.use_bram_block {Stand_Alone} \
  ] $axi_bram_ctrl_0_bram_1


  # Create interface connections
  connect_bd_intf_net -intf_net pcie_refclk_1 [get_bd_intf_ports pcie_refclk] [get_bd_intf_pins PCIe/pcie_refclk]
  connect_bd_intf_net -intf_net user_si570_sysclk_1 [get_bd_intf_ports user_si570_sysclk] [get_bd_intf_pins Clk_Reset/user_si570_sysclk]
  connect_bd_intf_net -intf_net xdma_0_pcie_mgt [get_bd_intf_ports pci_express_x1] [get_bd_intf_pins PCIe/pci_express_x1]

  # Create port connections
  connect_bd_net -net AES_encrypt_BRAM_PORT_addrb [get_bd_pins AES_encrypt/BRAM_PORT_addrb] [get_bd_pins axi_bram_ctrl_0_bram_1/addrb]
  connect_bd_net -net AES_encrypt_BRAM_PORT_dinb [get_bd_pins AES_encrypt/BRAM_PORT_dinb] [get_bd_pins axi_bram_ctrl_0_bram_1/dinb]
  connect_bd_net -net AES_encrypt_BRAM_PORT_doutb [get_bd_pins axi_bram_ctrl_0_bram_1/doutb] [get_bd_pins AES_encrypt/AES_encrypt_BRAM_PORT_doutb]
  connect_bd_net -net AES_encrypt_BRAM_PORT_enb [get_bd_pins AES_encrypt/BRAM_PORT_enb] [get_bd_pins axi_bram_ctrl_0_bram_1/enb]
  connect_bd_net -net AES_encrypt_BRAM_PORT_web [get_bd_pins AES_encrypt/BRAM_PORT_web] [get_bd_pins axi_bram_ctrl_0_bram_1/web]
  connect_bd_net -net AES_encrypt_GPIO_Encrytion_finish [get_bd_pins AES_encrypt/GPIO_Encrytion_finish] [get_bd_ports GPIO_LED_0_LS] [get_bd_ports PMOD1_0_LS]
  connect_bd_net -net AES_encrypt_Res [get_bd_pins AES_encrypt/Res] [get_bd_pins axi_bram_ctrl_0_bram_1/rstb]
  connect_bd_net -net PCIe_bram_addr_a [get_bd_pins PCIe/bram_addr_a] [get_bd_pins axi_bram_ctrl_0_bram_1/addra]
  connect_bd_net -net PCIe_bram_clk_a [get_bd_pins PCIe/bram_clk_a] [get_bd_pins axi_bram_ctrl_0_bram_1/clka]
  connect_bd_net -net PCIe_bram_en_a [get_bd_pins PCIe/bram_en_a] [get_bd_pins axi_bram_ctrl_0_bram_1/ena]
  connect_bd_net -net PCIe_bram_rst_a [get_bd_pins PCIe/bram_rst_a] [get_bd_pins axi_bram_ctrl_0_bram_1/rsta]
  connect_bd_net -net PCIe_bram_we_a [get_bd_pins PCIe/bram_we_a] [get_bd_pins axi_bram_ctrl_0_bram_1/wea] [get_bd_pins AES_encrypt/Data_ready_ext]
  connect_bd_net -net PCIe_bram_wrdata_a [get_bd_pins PCIe/bram_wrdata_a] [get_bd_pins axi_bram_ctrl_0_bram_1/dina] [get_bd_pins AES_encrypt/bram_wrdata_a]
  connect_bd_net -net PCIe_h2c_sts_0 [get_bd_pins PCIe/h2c_sts_0] [get_bd_pins AES_encrypt/h2c_sts_0]
  connect_bd_net -net axi_bram_ctrl_0_bram_1_douta [get_bd_pins axi_bram_ctrl_0_bram_1/douta] [get_bd_pins PCIe/bram_rddata_a] [get_bd_pins AES_encrypt/bram_rddata_a]
  connect_bd_net -net clk_wiz_0_clk_out1 [get_bd_pins Clk_Reset/clk_out1] [get_bd_pins AES_encrypt/clk] [get_bd_pins axi_bram_ctrl_0_bram_1/clkb]
  connect_bd_net -net pcie_perstn_1 [get_bd_ports pcie_perstn] [get_bd_pins PCIe/pcie_perstn]
  connect_bd_net -net probe15_1 [get_bd_pins PCIe/c2h_sts_0] [get_bd_pins AES_encrypt/c2h_sts_0]
  connect_bd_net -net proc_sys_reset_0_peripheral_aresetn [get_bd_pins Clk_Reset/peripheral_aresetn] [get_bd_pins AES_encrypt/rst]
  connect_bd_net -net reset_1 [get_bd_ports reset] [get_bd_pins Clk_Reset/reset]

  # Create address segments
  assign_bd_address -offset 0x00000000 -range 0x00008000 -target_address_space [get_bd_addr_spaces PCIe/xdma_0/M_AXI] [get_bd_addr_segs PCIe/axi_bram_ctrl_0/S_AXI/Mem0] -force

  # Perform GUI Layout
  regenerate_bd_layout -layout_string {
   "ActiveEmotionalView":"Default View",
   "Default View_ScaleFactor":"0.832653",
   "Default View_TopLeft":"-167,-48",
   "ExpandedHierarchyInLayout":"",
   "guistr":"# # String gsaved with Nlview 7.5.8 2022-09-21 7111 VDI=41 GEI=38 GUI=JA:10.0
#  -string -flagsOSRD
preplace port pci_express_x1 -pg 1 -lvl 4 -x 1140 -y 60 -defaultsOSRD
preplace port pcie_refclk -pg 1 -lvl 0 -x -10 -y 120 -defaultsOSRD
preplace port user_si570_sysclk -pg 1 -lvl 0 -x -10 -y 420 -defaultsOSRD
preplace port port-id_pcie_perstn -pg 1 -lvl 0 -x -10 -y 140 -defaultsOSRD
preplace port port-id_reset -pg 1 -lvl 0 -x -10 -y 440 -defaultsOSRD
preplace port port-id_GPIO_LED_0_LS -pg 1 -lvl 4 -x 1140 -y 520 -defaultsOSRD
preplace port port-id_PMOD1_0_LS -pg 1 -lvl 4 -x 1140 -y 540 -defaultsOSRD
preplace inst PCIe -pg 1 -lvl 1 -x 190 -y 140 -defaultsOSRD
preplace inst Clk_Reset -pg 1 -lvl 1 -x 190 -y 430 -defaultsOSRD
preplace inst AES_encrypt -pg 1 -lvl 2 -x 650 -y 490 -defaultsOSRD
preplace inst axi_bram_ctrl_0_bram_1 -pg 1 -lvl 3 -x 1020 -y 270 -defaultsOSRD
preplace netloc AES_encrypt_BRAM_PORT_addrb 1 2 1 870 300n
preplace netloc AES_encrypt_BRAM_PORT_dinb 1 2 1 880 340n
preplace netloc AES_encrypt_BRAM_PORT_doutb 1 1 2 430 360 NJ
preplace netloc AES_encrypt_BRAM_PORT_enb 1 2 1 890 380n
preplace netloc AES_encrypt_BRAM_PORT_web 1 2 1 910 420n
preplace netloc AES_encrypt_GPIO_Encrytion_finish 1 2 2 NJ 540 1120J
preplace netloc AES_encrypt_Res 1 2 1 900 400n
preplace netloc PCIe_bram_addr_a 1 1 2 NJ 80 910
preplace netloc PCIe_bram_clk_a 1 1 2 NJ 100 900
preplace netloc PCIe_bram_en_a 1 1 2 NJ 140 880
preplace netloc PCIe_bram_rst_a 1 1 2 NJ 160 870
preplace netloc PCIe_bram_we_a 1 1 2 400 260 NJ
preplace netloc PCIe_bram_wrdata_a 1 1 2 410 180 N
preplace netloc PCIe_h2c_sts_0 1 1 1 370 220n
preplace netloc axi_bram_ctrl_0_bram_1_douta 1 0 3 10 270 420 200 NJ
preplace netloc clk_wiz_0_clk_out1 1 1 2 390 320 NJ
preplace netloc pcie_perstn_1 1 0 1 NJ 140
preplace netloc probe15_1 1 1 1 380 200n
preplace netloc proc_sys_reset_0_peripheral_aresetn 1 1 1 N 440
preplace netloc reset_1 1 0 1 NJ 440
preplace netloc pcie_refclk_1 1 0 1 NJ 120
preplace netloc user_si570_sysclk_1 1 0 1 NJ 420
preplace netloc xdma_0_pcie_mgt 1 1 3 NJ 60 NJ 60 NJ
levelinfo -pg 1 -10 190 650 1020 1140
pagesize -pg 1 -db -bbox -sgen -190 0 1310 610
"
}

  # Restore current instance
  current_bd_instance $oldCurInst

  validate_bd_design
  save_bd_design
  close_bd_design $design_name 
}
# End of cr_bd_design_1()

cr_bd_design_1 ""
set_property REGISTERED_WITH_MANAGER "1" [get_files design_1.bd ] 
set_property SYNTH_CHECKPOINT_MODE "Hierarchical" [get_files design_1.bd ] 

#call make_wrapper to create wrapper files
if { [get_property IS_LOCKED [ get_files -norecurse [list design_1.bd]] ] == 1  } {
  import_files -fileset sources_1 [file normalize "${origin_dir}/BRAM2AES.gen/sources_1/bd/design_1/hdl/design_1_wrapper.vhd" ]
} else {
  set wrapper_path [make_wrapper -fileset sources_1 -files [ get_files -norecurse [list design_1.bd]] -top]
  add_files -norecurse -fileset sources_1 $wrapper_path
}


set idrFlowPropertiesConstraints ""
catch {
 set idrFlowPropertiesConstraints [get_param runs.disableIDRFlowPropertyConstraints]
 set_param runs.disableIDRFlowPropertyConstraints 1
}

# Create 'synth_1' run (if not found)
if {[string equal [get_runs -quiet synth_1] ""]} {
    create_run -name synth_1 -part xczu7ev-ffvc1156-2-e -flow {Vivado Synthesis 2023} -strategy "Vivado Synthesis Defaults" -report_strategy {No Reports} -constrset constrs_1
} else {
  set_property strategy "Vivado Synthesis Defaults" [get_runs synth_1]
  set_property flow "Vivado Synthesis 2023" [get_runs synth_1]
}
set obj [get_runs synth_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Synthesis Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'synth_1_synth_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0] "" ] } {
  create_report_config -report_name synth_1_synth_report_utilization_0 -report_type report_utilization:1.0 -steps synth_design -runs synth_1
}
set obj [get_report_configs -of_objects [get_runs synth_1] synth_1_synth_report_utilization_0]
if { $obj != "" } {

}
set obj [get_runs synth_1]
set_property -name "incremental_checkpoint" -value "$proj_dir/BRAM2AES.srcs/utils_1/imports/synth_1/design_1_wrapper.dcp" -objects $obj
set_property -name "auto_incremental_checkpoint" -value "1" -objects $obj
set_property -name "strategy" -value "Vivado Synthesis Defaults" -objects $obj

# set the current synth run
current_run -synthesis [get_runs synth_1]

# Create 'impl_1' run (if not found)
if {[string equal [get_runs -quiet impl_1] ""]} {
    create_run -name impl_1 -part xczu7ev-ffvc1156-2-e -flow {Vivado Implementation 2023} -strategy "Vivado Implementation Defaults" -report_strategy {No Reports} -constrset constrs_1 -parent_run synth_1
} else {
  set_property strategy "Vivado Implementation Defaults" [get_runs impl_1]
  set_property flow "Vivado Implementation 2023" [get_runs impl_1]
}
set obj [get_runs impl_1]
set_property set_report_strategy_name 1 $obj
set_property report_strategy {Vivado Implementation Default Reports} $obj
set_property set_report_strategy_name 0 $obj
# Create 'impl_1_init_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_init_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps init_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_init_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_opt_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_drc_0 -report_type report_drc:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_place_report_io_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0] "" ] } {
  create_report_config -report_name impl_1_place_report_io_0 -report_type report_io:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_io_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0] "" ] } {
  create_report_config -report_name impl_1_place_report_utilization_0 -report_type report_utilization:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_place_report_control_sets_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0] "" ] } {
  create_report_config -report_name impl_1_place_report_control_sets_0 -report_type report_control_sets:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_control_sets_0]
if { $obj != "" } {
set_property -name "options.verbose" -value "1" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_incremental_reuse_1' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1] "" ] } {
  create_report_config -report_name impl_1_place_report_incremental_reuse_1 -report_type report_incremental_reuse:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_incremental_reuse_1]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj

}
# Create 'impl_1_place_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_place_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps place_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_place_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_post_place_power_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_place_power_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_place_power_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_place_power_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "is_enabled" -value "0" -objects $obj
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_drc_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0] "" ] } {
  create_report_config -report_name impl_1_route_report_drc_0 -report_type report_drc:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_drc_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_methodology_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0] "" ] } {
  create_report_config -report_name impl_1_route_report_methodology_0 -report_type report_methodology:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_methodology_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_power_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0] "" ] } {
  create_report_config -report_name impl_1_route_report_power_0 -report_type report_power:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_power_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_route_status_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0] "" ] } {
  create_report_config -report_name impl_1_route_report_route_status_0 -report_type report_route_status:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_route_status_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_route_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj

}
# Create 'impl_1_route_report_incremental_reuse_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0] "" ] } {
  create_report_config -report_name impl_1_route_report_incremental_reuse_0 -report_type report_incremental_reuse:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_incremental_reuse_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_clock_utilization_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0] "" ] } {
  create_report_config -report_name impl_1_route_report_clock_utilization_0 -report_type report_clock_utilization:1.0 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_clock_utilization_0]
if { $obj != "" } {

}
# Create 'impl_1_route_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_route_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps route_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_route_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_timing_summary_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_timing_summary_0 -report_type report_timing_summary:1.0 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_timing_summary_0]
if { $obj != "" } {
set_property -name "options.max_paths" -value "10" -objects $obj
set_property -name "options.report_unconstrained" -value "1" -objects $obj
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
# Create 'impl_1_post_route_phys_opt_report_bus_skew_0' report (if not found)
if { [ string equal [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0] "" ] } {
  create_report_config -report_name impl_1_post_route_phys_opt_report_bus_skew_0 -report_type report_bus_skew:1.1 -steps post_route_phys_opt_design -runs impl_1
}
set obj [get_report_configs -of_objects [get_runs impl_1] impl_1_post_route_phys_opt_report_bus_skew_0]
if { $obj != "" } {
set_property -name "options.warn_on_violation" -value "1" -objects $obj

}
set obj [get_runs impl_1]
set_property -name "strategy" -value "Vivado Implementation Defaults" -objects $obj
set_property -name "steps.write_bitstream.args.readback_file" -value "0" -objects $obj
set_property -name "steps.write_bitstream.args.verbose" -value "0" -objects $obj

# set the current impl run
current_run -implementation [get_runs impl_1]
catch {
 if { $idrFlowPropertiesConstraints != {} } {
   set_param runs.disableIDRFlowPropertyConstraints $idrFlowPropertiesConstraints
 }
}

puts "INFO: Project created:${_xil_proj_name_}"
# Create 'drc_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "drc_1" ] ] ""]} {
create_dashboard_gadget -name {drc_1} -type drc
}
set obj [get_dashboard_gadgets [ list "drc_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_drc_0" -objects $obj

# Create 'methodology_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "methodology_1" ] ] ""]} {
create_dashboard_gadget -name {methodology_1} -type methodology
}
set obj [get_dashboard_gadgets [ list "methodology_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_methodology_0" -objects $obj

# Create 'power_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "power_1" ] ] ""]} {
create_dashboard_gadget -name {power_1} -type power
}
set obj [get_dashboard_gadgets [ list "power_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_power_0" -objects $obj

# Create 'timing_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "timing_1" ] ] ""]} {
create_dashboard_gadget -name {timing_1} -type timing
}
set obj [get_dashboard_gadgets [ list "timing_1" ] ]
set_property -name "reports" -value "impl_1#impl_1_route_report_timing_summary_0" -objects $obj

# Create 'utilization_1' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_1" ] ] ""]} {
create_dashboard_gadget -name {utilization_1} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_1" ] ]
set_property -name "reports" -value "synth_1#synth_1_synth_report_utilization_0" -objects $obj
set_property -name "run.step" -value "synth_design" -objects $obj
set_property -name "run.type" -value "synthesis" -objects $obj

# Create 'utilization_2' gadget (if not found)
if {[string equal [get_dashboard_gadgets  [ list "utilization_2" ] ] ""]} {
create_dashboard_gadget -name {utilization_2} -type utilization
}
set obj [get_dashboard_gadgets [ list "utilization_2" ] ]
set_property -name "reports" -value "impl_1#impl_1_place_report_utilization_0" -objects $obj

move_dashboard_gadget -name {utilization_1} -row 0 -col 0
move_dashboard_gadget -name {power_1} -row 1 -col 0
move_dashboard_gadget -name {drc_1} -row 2 -col 0
move_dashboard_gadget -name {timing_1} -row 0 -col 1
move_dashboard_gadget -name {utilization_2} -row 1 -col 1
move_dashboard_gadget -name {methodology_1} -row 2 -col 1
